{"version":3,"file":"static/js/215.6b958d5a.chunk.js","mappings":"yPAEaA,EAAOC,EAAAA,EAAAA,KAAH,gNAUJC,EAAQD,EAAAA,EAAAA,MAAH,6QAeLE,EAAQF,EAAAA,EAAAA,MAAH,oIAOLG,EAASH,EAAAA,EAAAA,OAAH,yR,oBChCNI,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAKtBC,GAAyBC,EAAAA,EAAAA,IACpC,CAACL,EALyB,SAAAC,GAAK,OAAIA,EAAMK,MAAV,IAM/B,SAACJ,EAAUI,GACT,cAAOJ,QAAP,IAAOA,OAAP,EAAOA,EAAUI,QACb,SAAAC,GAAO,OACLA,EAAQC,KAAKC,cAAcC,SAASJ,EAAOG,gBAC3CF,EAAQI,OAAOD,SAASJ,EAFnB,GAIZ,I,uCCRUM,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,eACXZ,GAAWa,EAAAA,EAAAA,aAAYf,GAC7B,GAAsCgB,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOL,EAAP,KAAeQ,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACRP,GAASQ,EAAAA,EAAAA,oBACV,GAAE,CAACR,IAEJ,IAKMS,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBhB,EAAR,EAAQA,KAAMiB,EAAd,EAAcA,MACd,OAAQjB,GACN,IAAK,OACHU,EAAeO,GACf,MACF,IAAK,SACHN,EAAUM,GACV,MACF,QACE,OAEL,EAuBD,OACE,UAAC9B,EAAD,CAAM+B,SAvBa,SAAAH,GACnB,IAAMI,EAAe,CACnBnB,KAAMS,EACNN,OAAQA,GASV,GAPAY,EAAMK,iBAGJ1B,EAAS2B,MACP,SAAAtB,GAAO,OAAIA,EAAQC,KAAKC,gBAAkBkB,EAAanB,KAAKC,eAC1DF,EAAQI,SAAWgB,EAAahB,MAD3B,IAIT,OAAOmB,IAAAA,OAAAA,QAAA,mBACOH,EAAanB,KADpB,gBACgCmB,EAAahB,OAD7C,uCAIPE,GAASkB,EAAAA,EAAAA,kBAAiBJ,IAlC5BT,EAAe,IACfC,EAAU,GAoCX,EAGC,WACE,UAACrB,EAAD,WAAO,QAEL,SAACD,EAAD,CACEmC,KAAK,OACLxB,KAAK,OACLiB,MAAOR,EACPgB,SAAUX,EACVY,QAAQ,2HACRC,MAAM,yIACNC,UAAQ,QAGZ,UAACtC,EAAD,WAAO,UAEL,SAACD,EAAD,CACEmC,KAAK,MACLxB,KAAK,SACLiB,MAAOd,EACPsB,SAAUX,EACVY,QAAQ,qGACRC,MAAM,+FACNC,UAAQ,QAGZ,SAACrC,EAAD,CAAQiC,KAAK,SAAb,SAAsB,kBAG3B,ECpFYK,EAAazC,EAAAA,EAAAA,IAAH,gDAIVE,EAAQF,EAAAA,EAAAA,MAAH,uGAOLC,EAAQD,EAAAA,EAAAA,MAAH,8O,UCRX,SAAS0C,IACd,IAAMzB,GAAWC,EAAAA,EAAAA,eACXR,GAASS,EAAAA,EAAAA,aAAYwB,EAAAA,IAK3B,OACE,SAACF,EAAD,WACE,UAAC,EAAD,WAAO,yCAEL,SAAC,EAAD,CAAOL,KAAK,OAAOP,MAAOnB,EAAQ2B,SARvB,SAAAV,GACfV,GAAS2B,EAAAA,EAAAA,IAAUjB,EAAMC,OAAOC,OACjC,QAUF,CClBM,IAAMgB,EAAO7C,EAAAA,EAAAA,GAAH,4OAYJ8C,EAAO9C,EAAAA,EAAAA,GAAH,iPAYJG,EAASH,EAAAA,EAAAA,OAAH,mSCpBN+C,EAAc,WACzB,IAAM9B,GAAWC,EAAAA,EAAAA,eACX8B,GAAmB7B,EAAAA,EAAAA,aAAYX,GAErC,OACE,+BACE,SAACqC,EAAD,UACGG,EAAiBC,KAAI,gBAAGC,EAAH,EAAGA,GAAItC,EAAP,EAAOA,KAAMG,EAAb,EAAaA,OAAb,OACpB,UAAC+B,EAAD,WACGlC,EAAO,MAAQG,GAEd,SAAC,EAAD,CACEqB,KAAK,SACLxB,KAAK,SACLuC,QAAS,kBAAMlC,GAASmC,EAAAA,EAAAA,qBAAoBF,GAAnC,EAHX,SAIC,aAPMA,EADS,OAiB7B,EC1BO1B,EAAc6B,EAAQ,MAAtB7B,UACAN,EAAgBmC,EAAQ,MAAxBnC,YACAO,EAAqB4B,EAAQ,MAA7B5B,iBAkBR,EAhBiB,WACf,IAAMR,EAAWC,IAKjB,OAHAM,GAAU,WACRP,EAASQ,EACV,GAAE,CAACR,KAEF,4BACE,SAACD,EAAD,KACA,4BACE,SAAC0B,EAAD,KACA,SAACK,EAAD,SAIP,C","sources":["components/ContactForm/ContactForm.styled.jsx","redux/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 400px;\n  padding: 12px;\n  font-weight: 500;\n  background-color: #dfeff5;\n  border: 3px solid #e88606;\n  border-radius: 8px;\n`;\nexport const Input = styled.input`\n  margin-top: 10px;\n  padding: 6px 10px;\n  border: none;\n  border: 2px solid #dfeff5;\n  border-radius: 5px;\n  font: inherit;\n  cursor: pointer;\n\n  &:focus{\n  outline: none;\n  border: 2px solid #e88606;\n  background-color: #fff;\n  }\n`;\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 16px;\n  color: #e88606;\n  font-size: 20px;\n`;\nexport const Button = styled.button`\n  padding: 6px 10px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 8px;\n  border: 3px solid #e88606;\n  color: #e88606;\n  font-size: 20px;\n \n  &:hover,\n  &:focus {\n    color: #fff;\n    background-color: #e88606;\n    cursor: pointer;\n  }\n`;","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts?.filter(\n        contact =>\n          contact.name.toLowerCase().includes(filter.toLowerCase()) ||\n          contact.number.includes(filter)\n      );\n  }\n);","import React, { useEffect, useState } from 'react';\nimport { Form, Label, Input, Button } from './ContactForm.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/selectors';\nimport { getContactsThunk, addContactsThunk } from 'redux/contactsThunk';\nimport Notiflix from 'notiflix';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const [contactName, setContactName] = useState('');\n  const [number, setNumber] = useState('');\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  const reset = () => {\n    setContactName('');\n    setNumber('');\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    switch (name) {\n      case 'name':\n        setContactName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n  const handleSubmit = event => {\n    const phoneContact = {\n      name: contactName,\n      number: number,\n    };\n    event.preventDefault();\n\n    const isDuplicateContact = \n      contacts.some(\n        contact => contact.name.toLowerCase() === phoneContact.name.toLowerCase() ||\n          contact.number === phoneContact.number\n      );\n    if (isDuplicateContact) {\n      return Notiflix.Notify.warning(\n        `Contact \"${phoneContact.name}\" or ${phoneContact.number} is already in your contacts list!`\n      )\n    } \n      dispatch(addContactsThunk(phoneContact));\n      reset();\n    \n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Name\n        <Input\n          type=\"text\"\n          name=\"name\"\n          value={contactName}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </Label>\n      <Label>\n        Number\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n  );\n};\n\n","import styled from '@emotion/styled';\n\nexport const FilterCont = styled.div`\n  margin-bottom: 15px;\n`;\n\nexport const Label = styled.label`\n  color: #000;\n  font-size: 20px;\n  margin-left: 15px;\n  font-weight: 500;\n`;\n\nexport const Input = styled.input`\n  width: 408px;\n  padding: 8px;\n  margin: 15px auto;\n  border-radius: 8px;\n  border: none;\n  border: 3px solid #dfeff5;\n  font-size: 20px;\n\n   &:focus{\n  outline: none;\n  border: 3px solid #e88606;\n  }\n`;\n","import React from 'react';\nimport { FilterCont, Label, Input } from './Filter.styled';\nimport { getFilter, setFilter } from 'redux/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\n\nexport function Filter() {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n  const onChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n  \n  return (\n    <FilterCont>\n      <Label>\n        Find contacts by name or phone number\n        <Input type=\"text\" value={filter} onChange={onChange} />\n      </Label>\n    </FilterCont>\n  );\n}\n\n\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  width: 400px;\n  padding: 12px;\n  border-radius: 8px;\n  background-color: #dfeff5;\n  border: 3px solid #e88606;\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  background-color: #fff;\n  border: 2px solid #dfeff5;\n  padding: 6px;\n  border-radius: 8px;\n  margin-bottom: 5px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 20px;\n`;\n\nexport const Button = styled.button`\n  padding: 2px 8px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 8px 8px;\n  border: 3px solid #e88606;\n  color: #e88606;\n  background-color: #e8e8e8;\n  &:hover,\n  &:focus {\n    color: #fff;\n    background-color: #e88606;\n    cursor: pointer;\n  }\n`;","import React from 'react';\nimport { List, Button, Item } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContactsThunk } from 'redux/contactsThunk';\nimport { selectFilteredContacts } from 'redux/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <>\n      <List>\n        {filteredContacts.map(({ id, name, number }) => (\n          <Item key={id}>\n            {name + ' : ' + number}\n            {\n              <Button\n                type=\"button\"\n                name=\"delete\"\n                onClick={() => dispatch(deleteContactsThunk(id))}\n              >\n                delete\n              </Button>\n            }\n          </Item>\n        ))}\n      </List>\n    </>\n  );\n};\n\n","import { ContactForm } from '../../components/ContactForm/ContactForm';\nimport { Filter } from '../../components/Filter/Filter';\nimport { ContactList } from '../../components/ContactList/ContactList';\n\nconst { useEffect } = require('react');\nconst { useDispatch } = require('react-redux');\nconst { getContactsThunk } = require('redux/contactsThunk');\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  \n  useEffect(() => {\n    dispatch(getContactsThunk);\n  }, [dispatch]);\n  return (\n    <div>\n      <ContactForm />\n      <div>\n        <Filter />\n        <ContactList />\n      </div>\n    </div>\n  );\n};\nexport default Contacts;\n"],"names":["Form","styled","Input","Label","Button","selectContacts","state","contacts","items","selectFilteredContacts","createSelector","filter","contact","name","toLowerCase","includes","number","ContactForm","dispatch","useDispatch","useSelector","useState","contactName","setContactName","setNumber","useEffect","getContactsThunk","handleChange","event","target","value","onSubmit","phoneContact","preventDefault","some","Notiflix","addContactsThunk","type","onChange","pattern","title","required","FilterCont","Filter","getFilter","setFilter","List","Item","ContactList","filteredContacts","map","id","onClick","deleteContactsThunk","require"],"sourceRoot":""}